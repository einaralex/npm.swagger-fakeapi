/* eslint-disable arrow-body-style, prefer-rest-params, max-len */

const test = require('ava')
const path = require('path')
const fake = require(path.resolve(__dirname, '../lib/fake'))

function randomizer () {
  const seq = arguments.length ? Array.from(arguments) : [ 0.7 ]
  let pos = 0
  return { random: () => seq[(pos++) % seq.length] }
}

test('fake boolean', t => {
  const rnd = randomizer(0.7, 0.2, 0.55, 0, 1)
  t.is(fake.boolean(rnd), true, 'is a predictable boolean')
  t.is(fake.boolean(rnd), false, 'is a predictable boolean')
  t.is(fake.boolean(rnd), true, 'is a predictable boolean')
  t.is(fake.boolean(rnd), false, 'is a predictable boolean')
  t.is(fake.boolean(rnd), true, 'is a predictable boolean')
})

test('fake number', t => {
  const rnd = randomizer(0.7, 0.2, 0.55, 0, 1)
  t.is(fake.number(rnd), 7, 'is a predictable number')
  t.is(fake.number(rnd), 2, 'is a predictable number')
  t.is(fake.number(rnd), 5.5, 'is a predictable number')
  t.is(fake.number(rnd), 0, 'is a predictable number')
  t.is(fake.number(rnd), 10, 'is a predictable number')

  for (let i = 0; i < 1000; i++) {
    const int = fake.number(Math, 0, i)
    t.is(typeof int, 'number', 'is a number')
    t.truthy(isFinite(int), 'is finite')
    t.truthy(int >= 0, 'is geq than min')
    t.truthy(int <= i, 'is leq than max')
  }
  for (let i = 0; i < 1000; i++) {
    const int = fake.number(Math, i, 2000)
    t.is(typeof int, 'number', 'is a number')
    t.truthy(isFinite(int), 'is finite')
    t.truthy(int >= i, 'is geq than min')
    t.truthy(int <= 2000, 'is leq than max')
  }
})

test('fake integer', t => {
  const rnd = randomizer(0.7, 0.2, 0.55, 0, 1)
  t.is(fake.integer(rnd), 3, 'is a predictable integer')
  t.is(fake.integer(rnd), 1, 'is a predictable integer')
  t.is(fake.integer(rnd), 2, 'is a predictable integer')
  t.is(fake.integer(rnd), 0, 'is a predictable integer')
  t.is(fake.integer(rnd), 5, 'is a predictable integer')

  for (let i = 0; i < 1000; i++) {
    const int = fake.integer(Math, 0, i)
    t.is(Math.floor(int), int, 'is integer')
    t.truthy(int >= 0, 'is geq than min')
    t.truthy(int <= i, 'is leq than max')
  }
  for (let i = 0; i < 1000; i++) {
    const int = fake.integer(Math, i, 2000)
    t.is(Math.floor(int), int, 'is integer')
    t.truthy(int >= i, 'is geq than min')
    t.truthy(int <= 2000, 'is leq than max')
  }
})

test('fake id', t => {
  const rnd = randomizer(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
  t.is(fake.id(rnd), 'agmsyFLR', 'is a predictable code')
  t.is(fake.id(rnd), 'X3agmsyF', 'is a predictable code')
  t.is(fake.id(rnd), 'LRX3agms', 'is a predictable code')
  t.is(fake.id(rnd), 'yFLRX3ag', 'is a predictable code')
  t.is(fake.id(rnd), 'msyFLRX3', 'is a predictable code')
  t.is(fake.id(rnd), 'agmsyFLR', 'is a predictable code')
  t.is(fake.id(rnd), 'X3agmsyF', 'is a predictable code')
  t.is(fake.id(rnd), 'LRX3agms', 'is a predictable code')
  t.is(fake.id(rnd), 'yFLRX3ag', 'is a predictable code')
  t.is(fake.id(rnd), 'msyFLRX3', 'is a predictable code')
  t.is(fake.id(Math, 1, 1).length, 1, 'can be a fixed length')
  t.is(fake.id(Math, 10, 10).length, 10, 'can be a fixed length')
  t.is(fake.id(Math, 100, 100).length, 100, 'can be a fixed length')
  t.is(fake.id(Math, 1, 100).length, 8, 'wants to be 8 chars long')
  t.truthy(fake.id(Math, 9, 100).length < 17, 'tries to be short')
  t.truthy(fake.id(Math, 9, 100).length < 17, 'tries to be short')
  t.truthy(fake.id(Math, 9, 100).length < 17, 'tries to be short')
  t.truthy(fake.id(Math, 9, 100).length < 17, 'tries to be short')
  t.truthy(fake.id(Math, 9, 100).length < 17, 'tries to be short')
  t.truthy(fake.id(Math, 9, 100).length < 17, 'tries to be short')
})

test('fake companyId', t => {
  // companyId is the same as id
  const rnd = randomizer(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
  t.is(fake.companyId(rnd), 'agmsyFLR', 'is a predictable code')
  t.is(fake.companyId(rnd), 'X3agmsyF', 'is a predictable code')
  t.is(fake.companyId(rnd), 'LRX3agms', 'is a predictable code')
  t.is(fake.companyId(rnd), 'yFLRX3ag', 'is a predictable code')
  t.is(fake.companyId(rnd), 'msyFLRX3', 'is a predictable code')
  t.is(fake.companyId(rnd), 'agmsyFLR', 'is a predictable code')
  t.is(fake.companyId(rnd), 'X3agmsyF', 'is a predictable code')
  t.is(fake.companyId(rnd), 'LRX3agms', 'is a predictable code')
  t.is(fake.companyId(rnd), 'yFLRX3ag', 'is a predictable code')
  t.is(fake.companyId(rnd), 'msyFLRX3', 'is a predictable code')
  t.is(fake.companyId(Math, 1, 1).length, 1, 'can be a fixed length')
  t.is(fake.companyId(Math, 10, 10).length, 10, 'can be a fixed length')
  t.is(fake.companyId(Math, 100, 100).length, 100, 'can be a fixed length')
  t.is(fake.companyId(Math, 1, 100).length, 8, 'wants to be 8 chars long')
  t.truthy(fake.companyId(Math, 9, 100).length < 17, 'tries to be short')
  t.truthy(fake.companyId(Math, 9, 100).length < 17, 'tries to be short')
  t.truthy(fake.companyId(Math, 9, 100).length < 17, 'tries to be short')
  t.truthy(fake.companyId(Math, 9, 100).length < 17, 'tries to be short')
  t.truthy(fake.companyId(Math, 9, 100).length < 17, 'tries to be short')
  t.truthy(fake.companyId(Math, 9, 100).length < 17, 'tries to be short')
})

test('fake time', t => {
  const rnd = randomizer(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
  t.is(fake.dateTime(rnd), '1999-12-31T00:00:00.000Z', 'is a predictable ISO timestamp')
  t.is(fake.dateTime(rnd), '2001-11-24T10:40:00.000Z', 'is a predictable ISO timestamp')
  t.is(fake.dateTime(rnd), '2003-10-19T21:20:00.000Z', 'is a predictable ISO timestamp')
  t.is(fake.dateTime(rnd), '2005-09-13T08:00:00.000Z', 'is a predictable ISO timestamp')
  t.is(fake.dateTime(rnd), '2007-08-08T18:40:00.000Z', 'is a predictable ISO timestamp')
  t.is(fake.dateTime(rnd), '2009-07-03T05:20:00.000Z', 'is a predictable ISO timestamp')
  t.is(fake.dateTime(rnd), '2011-05-28T16:00:00.000Z', 'is a predictable ISO timestamp')
  t.is(fake.dateTime(rnd), '2013-04-22T02:40:00.000Z', 'is a predictable ISO timestamp')
  t.is(fake.dateTime(rnd), '2015-03-17T13:20:00.000Z', 'is a predictable ISO timestamp')
  t.is(fake.dateTime(rnd), '2017-02-09T00:00:00.000Z', 'is a predictable ISO timestamp')
})

test('fake date', t => {
  const rnd = randomizer(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
  t.is(fake.date(rnd), '1999-12-31', 'is a predictable ISO date')
  t.is(fake.date(rnd), '2001-11-24', 'is a predictable ISO date')
  t.is(fake.date(rnd), '2003-10-19', 'is a predictable ISO date')
  t.is(fake.date(rnd), '2005-09-13', 'is a predictable ISO date')
  t.is(fake.date(rnd), '2007-08-08', 'is a predictable ISO date')
  t.is(fake.date(rnd), '2009-07-03', 'is a predictable ISO date')
  t.is(fake.date(rnd), '2011-05-28', 'is a predictable ISO date')
  t.is(fake.date(rnd), '2013-04-22', 'is a predictable ISO date')
  t.is(fake.date(rnd), '2015-03-17', 'is a predictable ISO date')
  t.is(fake.date(rnd), '2017-02-09', 'is a predictable ISO date')
})

test('fake currency', t => {
  const rnd = randomizer(0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09)
  t.is(fake.currency(rnd), 'KHR', 'is a predictable currency code')
  t.is(fake.currency(rnd), 'CAD', 'is a predictable currency code')
  t.is(fake.currency(rnd), 'SGD', 'is a predictable currency code')
  t.is(fake.currency(rnd), 'RWF', 'is a predictable currency code')
  t.is(fake.currency(rnd), 'HKD', 'is a predictable currency code')
  t.is(fake.currency(rnd), 'DZD', 'is a predictable currency code')
  t.is(fake.currency(rnd), 'XPF', 'is a predictable currency code')
  t.is(fake.currency(rnd), 'TMT', 'is a predictable currency code')
  t.is(fake.currency(rnd), 'RSD', 'is a predictable currency code')
  t.is(fake.currency(rnd), 'MRO', 'is a predictable currency code')
})

test('fake locale', t => {
  const rnd = randomizer(0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09)
  t.is(fake.locale(rnd), 'es_MX', 'is a predictable locale code')
  t.is(fake.locale(rnd), 'en', 'is a predictable locale code')
  t.is(fake.locale(rnd), 'nl', 'is a predictable locale code')
  t.is(fake.locale(rnd), 'nep', 'is a predictable locale code')
  t.is(fake.locale(rnd), 'en_IND', 'is a predictable locale code')
  t.is(fake.locale(rnd), 'en_CA', 'is a predictable locale code')
  t.is(fake.locale(rnd), 'zh_CN', 'is a predictable locale code')
  t.is(fake.locale(rnd), 'pt_BR', 'is a predictable locale code')
  t.is(fake.locale(rnd), 'nb_NO', 'is a predictable locale code')
  t.is(fake.locale(rnd), 'id_ID', 'is a predictable locale code')
})

test('fake slug', t => {
  const rnd = randomizer(0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09)
  t.is(fake.slug(rnd), 'esse-repellat-quisquam', 'is a predictable slug')
  t.is(fake.slug(rnd), 'ratione-ea-qui', 'is a predictable slug')
  t.is(fake.slug(rnd), 'quisquam-ipsa-minima', 'is a predictable slug')
  t.is(fake.slug(rnd), 'nobis-non-ducimus', 'is a predictable slug')
  t.is(fake.slug(rnd), 'voluptatem-non-blanditiis', 'is a predictable slug')
  t.is(fake.slug(rnd), 'eius-magnam-voluptates', 'is a predictable slug')
  t.is(fake.slug(rnd), 'hic-eum-minima', 'is a predictable slug')
  t.is(fake.slug(rnd), 'dolor-nobis-quaerat', 'is a predictable slug')
  t.is(fake.slug(rnd), 'libero-voluptas-ut', 'is a predictable slug')
  t.is(fake.slug(rnd), 'ut-iure-iusto', 'is a predictable slug')
})

test('fake url', t => {
  const rnd = randomizer(0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09)
  t.is(fake.url(rnd), 'http://zion.net', 'is a predictable url')
  t.is(fake.url(rnd), 'http://griffin.net', 'is a predictable url')
  t.is(fake.url(rnd), 'https://alize.biz', 'is a predictable url')
  t.is(fake.url(rnd), 'https://cortney.info', 'is a predictable url')
  t.is(fake.url(rnd), 'http://coty.info', 'is a predictable url')
  t.is(fake.url(rnd), 'http://demarcus.org', 'is a predictable url')
  t.is(fake.url(rnd), 'https://rhoda.biz', 'is a predictable url')
  t.is(fake.url(rnd), 'https://marley.biz', 'is a predictable url')
  t.is(fake.url(rnd), 'https://erika.info', 'is a predictable url')
  t.is(fake.url(rnd), 'https://gideon.info', 'is a predictable url')
})

test('fake zip', t => {
  const rnd = randomizer(0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09)
  t.is(fake.zip(rnd), '97901', 'is a predictable zip code')
  t.is(fake.zip(rnd), '48515', 'is a predictable zip code')
  t.is(fake.zip(rnd), '02673-6782', 'is a predictable zip code')
  t.is(fake.zip(rnd), '24713-2215', 'is a predictable zip code')
  t.is(fake.zip(rnd), '24598', 'is a predictable zip code')
  t.is(fake.zip(rnd), '29344', 'is a predictable zip code')
  t.is(fake.zip(rnd), '82592-4091', 'is a predictable zip code')
  t.is(fake.zip(rnd), '62738-6367', 'is a predictable zip code')
  t.is(fake.zip(rnd), '33645-0602', 'is a predictable zip code')
  t.is(fake.zip(rnd), '34386-9442', 'is a predictable zip code')
})

test('fake country', t => {
  const rnd = randomizer(0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09)
  t.is(fake.country(rnd), 'Iraq', 'is a predictable country name')
  t.is(fake.country(rnd), 'Cambodia', 'is a predictable country name')
  t.is(fake.country(rnd), 'Puerto Rico', 'is a predictable country name')
  t.is(fake.country(rnd), 'Panama', 'is a predictable country name')
  t.is(fake.country(rnd), 'Georgia', 'is a predictable country name')
  t.is(fake.country(rnd), 'Cuba', 'is a predictable country name')
  t.is(fake.country(rnd), 'United States Minor Outlying Islands', 'is a predictable country name')
  t.is(fake.country(rnd), 'Sao Tome and Principe', 'is a predictable country name')
  t.is(fake.country(rnd), 'Oman', 'is a predictable country name')
  t.is(fake.country(rnd), 'Mali', 'is a predictable country name')
})

test('fake city', t => {
  const rnd = randomizer(0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09)
  t.is(fake.city(rnd), 'Port Mina', 'is a predictable city name')
  t.is(fake.city(rnd), 'West Reganmouth', 'is a predictable city name')
  t.is(fake.city(rnd), 'Alizeburgh', 'is a predictable city name')
  t.is(fake.city(rnd), 'Cortneyview', 'is a predictable city name')
  t.is(fake.city(rnd), 'East Jacklyn', 'is a predictable city name')
  t.is(fake.city(rnd), 'East Sylvanborough', 'is a predictable city name')
  t.is(fake.city(rnd), 'Shieldsburgh', 'is a predictable city name')
  t.is(fake.city(rnd), 'Paucekberg', 'is a predictable city name')
  t.is(fake.city(rnd), 'Erikaborough', 'is a predictable city name')
  t.is(fake.city(rnd), 'Gideonview', 'is a predictable city name')
})

test('fake street', t => {
  const rnd = randomizer(0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09)
  t.is(fake.street(rnd), '9790 Zulauf Creek', 'is a predictable street address')
  t.is(fake.street(rnd), '48515 Martin Forge', 'is a predictable street address')
  t.is(fake.street(rnd), '026 Muller Skyway', 'is a predictable street address')
  t.is(fake.street(rnd), '247 Fritsch Dale', 'is a predictable street address')
  t.is(fake.street(rnd), '24598 Considine Rue', 'is a predictable street address')
  t.is(fake.street(rnd), '29344 Koepp Groves', 'is a predictable street address')
  t.is(fake.street(rnd), '825 Kautzer Wall', 'is a predictable street address')
  t.is(fake.street(rnd), '627 Mallie Harbor', 'is a predictable street address')
  t.is(fake.street(rnd), '336 Alda Meadow', 'is a predictable street address')
  t.is(fake.street(rnd), '3438 Jailyn Plaza', 'is a predictable street address')
})

test('fake title', t => {
  const rnd = randomizer(0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09)
  t.is(fake.title(rnd), 'Repellat quisquam recusandae alias consequuntur corporis.', 'is a predictable title')
  t.is(fake.title(rnd), 'Ea qui iste quia.', 'is a predictable title')
  t.is(fake.title(rnd), 'Ipsa minima est omnis suscipit fuga temporibus eos.', 'is a predictable title')
  t.is(fake.title(rnd), 'Non ducimus possimus sequi voluptas magnam magnam aut.', 'is a predictable title')
  t.is(fake.title(rnd), 'Non blanditiis unde et officiis.', 'is a predictable title')
  t.is(fake.title(rnd), 'Magnam voluptates suscipit voluptatum.', 'is a predictable title')
  t.is(fake.title(rnd), 'Eum minima quas reiciendis dolore molestiae perferendis tenetur odit eaque.', 'is a predictable title')
  t.is(fake.title(rnd), 'Nobis quaerat est ipsam nulla nam autem quidem quibusdam.', 'is a predictable title')
  t.is(fake.title(rnd), 'Voluptas ut cum corrupti cupiditate accusantium optio dicta.', 'is a predictable title')
  t.is(fake.title(rnd), 'Iure iusto qui pariatur et asperiores praesentium.', 'is a predictable title')
})

test('fake paragraph', t => {
  const rnd = randomizer(0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09)
  t.is(fake.paragraph(rnd), 'Quisquam recusandae alias consequuntur corporis repellat ratione ut sunt qui. Iure ut libero qui. Ut nulla quam ipsam nobis cupiditate sed dignissimos debitis incidunt. Sed libero repudiandae.', 'is a predictable sentence')
  t.is(fake.paragraph(rnd), 'Qui iste quia molestias dolore ut. Eveniet quia magnam voluptates pariatur in vel placeat. Maxime sed nam quidem.', 'is a predictable sentence')
})

test('fake paragraphs', t => {
  const rnd = randomizer(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
  t.is(fake.paragraphs(rnd), 'Quisquam recusandae alias consequuntur corporis repellat ratione ut sunt qui. Iure ut libero qui. Ut nulla quam ipsam nobis cupiditate sed dignissimos debitis incidunt. Sed libero repudiandae.\n \rNatus et eos itaque velit omnis. Porro ut et ipsam explicabo eligendi occaecati debitis et. Eum dicta eum eaque enim ipsum inventore debitis libero aspernatur. Quam tempore a velit provident velit eligendi.\n \rQui nobis repellendus fugiat velit. Aperiam placeat fuga. Distinctio placeat ullam minima ducimus temporibus modi aut architecto ducimus. Voluptates explicabo exercitationem ut quis sed.', 'emits a predictable set of paragraphs')
})

test('fake html', t => {
  const rnd = randomizer(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
  t.is(fake.html(rnd), '<p>Sit vitae soluta <em>sint</em> non voluptates ut. Quos qui illo error sunt. Ratione a officia quaerat cumque incidunt aut.</p>\n<p>Hic eligendi quos esse ut ab. Sed quae nam eos sint autem rerum doloremque officia. Ut ut eos <em>ducimus</em> eos saepe consequatur vel in ut. <em>Et</em> molestiae ea ut. Placeat quidem est consequuntur aut est fuga.</p>\n<p><strong>Ex</strong> ut voluptas enim ex eveniet facere molestiae <em>aut.</em> Aut nam et dolorum architecto fugit repellendus <em>hic</em> veritatis qui. Culpa earum voluptate vel labore. <em>Ut</em> est sunt corporis alias est et sequi <em>voluptas.</em> Non aut rerum impedit ex rem voluptates.</p>', 'emits predictable HTML text')
})

test('fake word', t => {
  const rnd = randomizer(0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09)
  t.is(fake.word(rnd), 'esse', 'is a predictable word')
  t.is(fake.word(rnd), 'ratione', 'is a predictable word')
  t.is(fake.word(rnd), 'quisquam', 'is a predictable word')
  t.is(fake.word(rnd), 'nobis', 'is a predictable word')
  t.is(fake.word(rnd), 'voluptatem', 'is a predictable word')
  t.is(fake.word(rnd), 'eius', 'is a predictable word')
  t.is(fake.word(rnd), 'hic', 'is a predictable word')
  t.is(fake.word(rnd), 'dolor', 'is a predictable word')
  t.is(fake.word(rnd), 'libero', 'is a predictable word')
  t.is(fake.word(rnd), 'ut', 'is a predictable word')
})

test('fake path', t => {
  const rnd = randomizer(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
  t.is(fake.path(rnd), '/iure/', 'is a predictable path')
  t.is(fake.path(rnd), '/inventore/alias/', 'is a predictable path')
  t.is(fake.path(rnd), '/soluta/autem/temporibus/', 'is a predictable path')
  t.is(fake.path(rnd), '/velit/corporis/quasi/', 'is a predictable path')
  t.is(fake.path(rnd), '/repudiandae/magni/nulla/tempora/', 'is a predictable path')
  t.is(fake.path(rnd), '/deserunt/', 'is a predictable path')
  t.is(fake.path(rnd), '/inventore/alias/', 'is a predictable path')
  t.is(fake.path(rnd), '/soluta/autem/temporibus/', 'is a predictable path')
  t.is(fake.path(rnd), '/velit/corporis/quasi/', 'is a predictable path')
  t.is(fake.path(rnd), '/repudiandae/magni/nulla/tempora/', 'is a predictable path')
})

test('fake imageUrl', t => {
  const rnd = randomizer(0, 0.3, 0.6, 0.9)
  t.is(fake.imageUrl(rnd), '//loremflickr.com/500/600', 'is a predictable image URL')
  t.is(fake.imageUrl(rnd), '//loremflickr.com/700/850', 'is a predictable image URL')
  t.is(fake.imageUrl(rnd), '//loremflickr.com/500/600', 'is a predictable image URL')
  t.is(fake.imageUrl(rnd), '//loremflickr.com/700/850', 'is a predictable image URL')
})

test('fake name', t => {
  const rnd = randomizer(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
  t.is(fake.name(rnd), 'Mina Watsica', 'is a predictable name')
  t.is(fake.name(rnd), 'Alison O\'Keefe', 'is a predictable name')
  t.is(fake.name(rnd), 'Mrs. Oswald Thompson', 'is a predictable name')
  t.is(fake.name(rnd), 'Rowan Ward', 'is a predictable name')
  t.is(fake.name(rnd), 'Stefan Koch', 'is a predictable name')
  t.is(fake.name(rnd), 'Reva Glover', 'is a predictable name')
  t.is(fake.name(rnd), 'Gisselle Trantow', 'is a predictable name')
  t.is(fake.name(rnd), 'Zoe Thiel', 'is a predictable name')
  t.is(fake.name(rnd), 'Riley White', 'is a predictable name')
  t.is(fake.name(rnd), 'Bradly Connelly', 'is a predictable name')
})

test('fake email', t => {
  const rnd = randomizer(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
  t.is(fake.email(rnd), 'Zion.Reichel12@example.com', 'is a predictable email address')
  t.is(fake.email(rnd), 'Vinnie.Batz@example.net', 'is a predictable email address')
  t.is(fake.email(rnd), 'Sonia.Sauer55@example.org', 'is a predictable email address')
  t.is(fake.email(rnd), 'Gudrun.Stark66@example.com', 'is a predictable email address')
  t.is(fake.email(rnd), 'Celia.Tromp@example.org', 'is a predictable email address')
  t.is(fake.email(rnd), 'Karlie26@example.net', 'is a predictable email address')
  t.is(fake.email(rnd), 'Otis.Hudson82@example.com', 'is a predictable email address')
  t.is(fake.email(rnd), 'Zachary_Zieme36@example.net', 'is a predictable email address')
  t.is(fake.email(rnd), 'Bryce.Sipes82@example.org', 'is a predictable email address')
  t.is(fake.email(rnd), 'Carolyn49@example.com', 'is a predictable email address')
})

test('fake companyName', t => {
  const rnd = randomizer(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
  t.is(fake.companyName(rnd), 'Zieme - Reichel', 'is a predictable company name')
  t.is(fake.companyName(rnd), 'Windler, Batz and O\'Keefe', 'is a predictable company name')
  t.is(fake.companyName(rnd), 'Tremblay Group', 'is a predictable company name')
  t.is(fake.companyName(rnd), 'Jacobson - Stark', 'is a predictable company name')
  t.is(fake.companyName(rnd), 'D\'Amore Group', 'is a predictable company name')
  t.is(fake.companyName(rnd), 'Little, Shanahan and Glover', 'is a predictable company name')
  t.is(fake.companyName(rnd), 'Sawayn - Hudson', 'is a predictable company name')
  t.is(fake.companyName(rnd), 'Zemlak, Zieme and Thiel', 'is a predictable company name')
  t.is(fake.companyName(rnd), 'Conroy Group', 'is a predictable company name')
  t.is(fake.companyName(rnd), 'Crooks - Cassin', 'is a predictable company name')
})

test('fake phoneNumber', t => {
  const rnd = randomizer(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
  t.is(fake.phoneNumber(rnd), '979-013-9120 x313', 'is a predictable phone number')
  t.is(fake.phoneNumber(rnd), '1-906-340-8548 x0372', 'is a predictable phone number')
  t.is(fake.phoneNumber(rnd), '(878) 259-9312', 'is a predictable phone number')
  t.is(fake.phoneNumber(rnd), '489.269.0928 x258', 'is a predictable phone number')
  t.is(fake.phoneNumber(rnd), '(184) 348-2323', 'is a predictable phone number')
  t.is(fake.phoneNumber(rnd), '1-582-201-0126 x82521', 'is a predictable phone number')
  t.is(fake.phoneNumber(rnd), '738.188.5440', 'is a predictable phone number')
  t.is(fake.phoneNumber(rnd), '1-998-833-4665 x7721', 'is a predictable phone number')
  t.is(fake.phoneNumber(rnd), '1-189-385-4464', 'is a predictable phone number')
  t.is(fake.phoneNumber(rnd), '1-111-467-8888', 'is a predictable phone number')
})

test('fake type', t => {
  const rnd = randomizer(0, 0.2, 0.4, 0.6, 0.8)
  t.is(fake.type(rnd), 'delta', 'is a predictable type or tag')
  t.is(fake.type(rnd), 'lima', 'is a predictable type or tag')
  t.is(fake.type(rnd), 'tango', 'is a predictable type or tag')
  t.is(fake.type(rnd), 'zulu', 'is a predictable type or tag')
  t.is(fake.type(rnd), 'kilo', 'is a predictable type or tag')
})

